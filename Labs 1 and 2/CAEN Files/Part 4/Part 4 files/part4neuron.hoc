// Kushal Jaligama
// BIOMEDE 517 - Neural Engineering
// Lab 2, Part 4
// Custom simplified neuron model

// Use this to scale the model
scale_factor = 0.5

// Define parameters for components here
soma_length = 24  * scale_factor // um
soma_diameter = 21 * scale_factor // um
soma_nseg = 100

dendrite_length = 50 * scale_factor // um
dendrite_diameter = 12 * scale_factor // um
dendrite_nseg = 222

non_myelinated_axon_length = 16 * scale_factor // um
non_myelinated_axon_diameter = 1 * scale_factor // um
non_myelinated_axon_nseg = 100

myelinated_axon_length = 300 * scale_factor // um
myelinated_axon_diameter = 1 * scale_factor // um
myelinated_axon_nseg = 100 // um

axon_hillock_length = 9 * scale_factor // um
axon_hillock_nseg = 9

create soma, dendrite, axon_hillock[axon_hillock_nseg], non_myelinated_axon, myelinated_axon
access soma

soma {
  nseg = soma_nseg
  pt3dadd(0, 0, 0, soma_diameter)
  pt3dadd(soma_length, 0, 0, soma_diameter)
  // Parameters from lab manual
  insert pas
  Ra=150
  cm=0.75
  g_pas=1/30000
  e_pas=-70
  insert na
  gbar_na=20
  insert kv
  gbar_kv=200
  insert km
  gbar_km=0.1
  insert kca
  gbar_kca=3
  insert ca
  gbar_ca=0.3
  insert cad
}

access dendrite
dendrite {
  nseg = dendrite_nseg
  pt3dadd(-dendrite_length, 0, 0, dendrite_diameter)
  pt3dadd(0, 0, 0, dendrite_diameter)
  // Parameters from lab manual
  insert pas
  Ra = 150
  cm = 0.75
  g_pas = 1/30000
  e_pas = -70
  insert na
  gbar_na = 20
  insert km
  gbar_km  = 0.1
  insert kca
  gbar_kca = 3
  insert ca
  gbar_ca = 0.3
  insert cad
}

access non_myelinated_axon
non_myelinated_axon {
  nseg = 100
  pt3dadd(soma_length + axon_hillock_length, 0, 0, non_myelinated_axon_diameter)
  pt3dadd(soma_length + axon_hillock_length + non_myelinated_axon_length, 0, 0, non_myelinated_axon_diameter)
  // Parameters from lab manual
  insert pas
  Ra=150
  cm=0.75
  g_pas=1/30000
  e_pas=-70
  insert na
  gbar_na=30000
  insert kv
  gbar_kv=2000
}

access myelinated_axon
myelinated_axon {
  nseg = 100
  pt3dadd(soma_length + axon_hillock_length + non_myelinated_axon_length, 0, 0, myelinated_axon_diameter)
  pt3dadd(soma_length + axon_hillock_length + non_myelinated_axon_length + myelinated_axon_length, 0, 0, myelinated_axon_diameter)
  // Parameters from lab manual
  insert pas
  Ra=150
  cm=0.04
  g_pas=1/30000
  e_pas=-70
  insert na
  gbar_na=20
}

access axon_hillock

for (i = 0; i < axon_hillock_nseg; i = i + 1) {
    axon_hillock[i] {
        nseg = 1
        pt3dadd(soma_length + i, 0, 0, soma_diameter - i * ((soma_diameter - non_myelinated_axon_diameter) / axon_hillock_nseg))
        insert pas
        Ra=150
        cm=0.75
        g_pas=1/30000
        e_pas=-70
        insert na
        gbar_na=30000
        insert kv
        gbar_kv=2000
    }
}

// Connect the compartments of the neuron together
connect dendrite(1), soma(0)
connect soma(1), axon_hillock[0](0)

for (i = 0; i < axon_hillock_nseg - 1; i = i + 1) {
    connect axon_hillock[i](1), axon_hillock[i + 1](0)
}

connect axon_hillock[axon_hillock_nseg - 1](1), non_myelinated_axon(0)
connect non_myelinated_axon(1), myelinated_axon(0)

// Apply the current stimulation

objectvar mystim
axon_hillock[4] mystim = new IClamp(0.5) // Place it at the midpoint of the 4th compartment
mystim.del = 5 // ms
mystim.dur = 5 // ms
mystim.amp = 0.62 // nA

// Graphing variables
tstop = 30 // ms

// --------------------------------------------------------------
// Exports Currents and Geometry
// --------------------------------------------------------------
forall {
  insert extracellular
  insert xtra
  }

load_file("interpxyz.hoc")    // only interpolates sections that have extracellular
load_file("setpointers.hoc")  // automatically calls grindaway() in interpxyz.hoc

// RECORD SECTION POSITIONS
objref f2
f2=new File()
f2.wopen("coordinates") // coordinate file name

f2.printf("name\tx\ty\tz\n")

forall{
  for (x) if(x!=0 && x!=1){
    f2.printf("%s(%g)\t%f\t%f\t%f\n", secname(), x, x_xtra(x), y_xtra(x), z_xtra(x))
  }
}
f2.close()

// RECORD MEMBRANE CURRENTS
objref f1
f1 = new File()
f1.wopen("currents") // current file name

finitialize()
fcurrent()

// write 'time' and section names (ms)
f1.printf("time (ms)\t")

forall {
  for (x) if(x!=0 && x!=1){
    f1.printf("%s(%g)\t",secname(),x)
  }
}

f1.printf("\n")

// write x values (um)
f1.printf("-1\t")
forall {
  for (x) if(x!=0 && x!=1){
    f1.printf("%f\t",x_xtra(x))
  }
}

f1.printf("\n")

// write y values (um)
f1.printf("-1\t")
forall {
  for (x) if(x!=0 && x!=1){
    f1.printf("%f\t",y_xtra(x))
  }
}

f1.printf("\n")

// write z values (um)
f1.printf("-1\t")
forall {
  for (x) if(x!=0 && x!=1){
    f1.printf("%f\t",z_xtra(x))
  }
}

f1.printf("\n")

// write currents (in Amps)
// note i_membrane is in mA/cm2 & area is in um2
proc advance() {
  f1.printf("%f\t", t)  

  forall {
      for(x) if (x!=0 && x!=1){
        f1.printf("%e\t", i_membrane(x)*area(x)*(1e-11))  //current in Amps
      }
    }
    f1.printf("\n")
  fadvance()
}
run()
